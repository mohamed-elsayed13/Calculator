
Keybad_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007c  0080007c  00000a94  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000011e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1a  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fd  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000988  00000000  00000000  000023ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000204  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e6  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 02 	call	0x508	; 0x508 <main>
  8a:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait_press_key>:
		}
		//--------------------------------
							
    }
}
void wait_press_key(){
  92:	cf 93       	push	r28
	int8_t key = keypad_read();
  94:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <keypad_read>
  98:	c8 2f       	mov	r28, r24
	while(key != 'C') key = keypad_read();  // wait until clear send
  9a:	83 34       	cpi	r24, 0x43	; 67
  9c:	29 f0       	breq	.+10     	; 0xa8 <wait_press_key+0x16>
  9e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <keypad_read>
  a2:	c8 2f       	mov	r28, r24
  a4:	83 34       	cpi	r24, 0x43	; 67
  a6:	d9 f7       	brne	.-10     	; 0x9e <wait_press_key+0xc>
	while(keypad_read() == key) ; // to prevent multiple print of same push button
  a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <keypad_read>
  ac:	8c 17       	cp	r24, r28
  ae:	e1 f3       	breq	.-8      	; 0xa8 <wait_press_key+0x16>
	LCD_write_command(1); // clear	
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
}
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <print_result1>:
void print_result1(uint32_t n1 ,uint32_t n2 ,int8_t op){ //normal operation between 2 number
  ba:	8f 92       	push	r8
  bc:	9f 92       	push	r9
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	4b 01       	movw	r8, r22
  ce:	5c 01       	movw	r10, r24
  d0:	69 01       	movw	r12, r18
  d2:	7a 01       	movw	r14, r20
	LCD_write_command(0xc0);
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
	switch(op){
  da:	0b 32       	cpi	r16, 0x2B	; 43
  dc:	51 f0       	breq	.+20     	; 0xf2 <print_result1+0x38>
  de:	0c 32       	cpi	r16, 0x2C	; 44
  e0:	1c f4       	brge	.+6      	; 0xe8 <print_result1+0x2e>
  e2:	0a 32       	cpi	r16, 0x2A	; 42
  e4:	59 f5       	brne	.+86     	; 0x13c <print_result1+0x82>
  e6:	22 c0       	rjmp	.+68     	; 0x12c <print_result1+0x72>
  e8:	0d 32       	cpi	r16, 0x2D	; 45
  ea:	61 f0       	breq	.+24     	; 0x104 <print_result1+0x4a>
  ec:	0f 32       	cpi	r16, 0x2F	; 47
  ee:	31 f5       	brne	.+76     	; 0x13c <print_result1+0x82>
  f0:	12 c0       	rjmp	.+36     	; 0x116 <print_result1+0x5c>
		case '+': LCD_write_num(n1+n2); break;
  f2:	c8 0c       	add	r12, r8
  f4:	d9 1c       	adc	r13, r9
  f6:	ea 1c       	adc	r14, r10
  f8:	fb 1c       	adc	r15, r11
  fa:	c7 01       	movw	r24, r14
  fc:	b6 01       	movw	r22, r12
  fe:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 102:	1c c0       	rjmp	.+56     	; 0x13c <print_result1+0x82>
		case '-': LCD_write_num(n1-n2); break;
 104:	c5 01       	movw	r24, r10
 106:	b4 01       	movw	r22, r8
 108:	6c 19       	sub	r22, r12
 10a:	7d 09       	sbc	r23, r13
 10c:	8e 09       	sbc	r24, r14
 10e:	9f 09       	sbc	r25, r15
 110:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 114:	13 c0       	rjmp	.+38     	; 0x13c <print_result1+0x82>
		case '/': LCD_write_num(n1/n2); break;
 116:	c5 01       	movw	r24, r10
 118:	b4 01       	movw	r22, r8
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 122:	ca 01       	movw	r24, r20
 124:	b9 01       	movw	r22, r18
 126:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 12a:	08 c0       	rjmp	.+16     	; 0x13c <print_result1+0x82>
		case '*': LCD_write_num(n1*n2); break;
 12c:	c7 01       	movw	r24, r14
 12e:	b6 01       	movw	r22, r12
 130:	a5 01       	movw	r20, r10
 132:	94 01       	movw	r18, r8
 134:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 138:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
	}
}
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	bf 90       	pop	r11
 148:	af 90       	pop	r10
 14a:	9f 90       	pop	r9
 14c:	8f 90       	pop	r8
 14e:	08 95       	ret

00000150 <print_result2>:

void print_result2(uint32_t n1 ,uint32_t n2 ,uint32_t n3 ,int8_t op1 ,int8_t op2){
 150:	4f 92       	push	r4
 152:	5f 92       	push	r5
 154:	6f 92       	push	r6
 156:	7f 92       	push	r7
 158:	af 92       	push	r10
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	28 97       	sbiw	r28, 0x08	; 8
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	6d 83       	std	Y+5, r22	; 0x05
 17c:	7e 83       	std	Y+6, r23	; 0x06
 17e:	8f 83       	std	Y+7, r24	; 0x07
 180:	98 87       	std	Y+8, r25	; 0x08
 182:	29 01       	movw	r4, r18
 184:	3a 01       	movw	r6, r20
 186:	e9 82       	std	Y+1, r14	; 0x01
 188:	fa 82       	std	Y+2, r15	; 0x02
 18a:	0b 83       	std	Y+3, r16	; 0x03
 18c:	1c 83       	std	Y+4, r17	; 0x04
 18e:	0c 2d       	mov	r16, r12
	LCD_write_command(0xc0);
 190:	80 ec       	ldi	r24, 0xC0	; 192
 192:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
	uint32_t temp = 0;
	if(op1 == '*' || op1 == '/'){
 196:	0a 32       	cpi	r16, 0x2A	; 42
 198:	71 f0       	breq	.+28     	; 0x1b6 <print_result2+0x66>
 19a:	0f 32       	cpi	r16, 0x2F	; 47
 19c:	09 f0       	breq	.+2      	; 0x1a0 <print_result2+0x50>
 19e:	65 c0       	rjmp	.+202    	; 0x26a <print_result2+0x11a>
		switch(op1){
			case '/': temp = n1/n2; break;
 1a0:	6d 81       	ldd	r22, Y+5	; 0x05
 1a2:	7e 81       	ldd	r23, Y+6	; 0x06
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	98 85       	ldd	r25, Y+8	; 0x08
 1a8:	a3 01       	movw	r20, r6
 1aa:	92 01       	movw	r18, r4
 1ac:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 1b0:	89 01       	movw	r16, r18
 1b2:	9a 01       	movw	r18, r20
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <print_result2+0x7a>
			case '*': temp = n1*n2; break;
 1b6:	c3 01       	movw	r24, r6
 1b8:	b2 01       	movw	r22, r4
 1ba:	2d 81       	ldd	r18, Y+5	; 0x05
 1bc:	3e 81       	ldd	r19, Y+6	; 0x06
 1be:	4f 81       	ldd	r20, Y+7	; 0x07
 1c0:	58 85       	ldd	r21, Y+8	; 0x08
 1c2:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 1c6:	8b 01       	movw	r16, r22
 1c8:	9c 01       	movw	r18, r24
		}
		switch(op2){
 1ca:	0f 2e       	mov	r0, r31
 1cc:	fb e2       	ldi	r31, 0x2B	; 43
 1ce:	cf 2e       	mov	r12, r31
 1d0:	f0 2d       	mov	r31, r0
 1d2:	ac 14       	cp	r10, r12
 1d4:	c1 f0       	breq	.+48     	; 0x206 <print_result2+0xb6>
 1d6:	ca 14       	cp	r12, r10
 1d8:	44 f0       	brlt	.+16     	; 0x1ea <print_result2+0x9a>
 1da:	0f 2e       	mov	r0, r31
 1dc:	fa e2       	ldi	r31, 0x2A	; 42
 1de:	df 2e       	mov	r13, r31
 1e0:	f0 2d       	mov	r31, r0
 1e2:	ad 14       	cp	r10, r13
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <print_result2+0x98>
 1e6:	d8 c0       	rjmp	.+432    	; 0x398 <print_result2+0x248>
 1e8:	35 c0       	rjmp	.+106    	; 0x254 <print_result2+0x104>
 1ea:	0f 2e       	mov	r0, r31
 1ec:	fd e2       	ldi	r31, 0x2D	; 45
 1ee:	ef 2e       	mov	r14, r31
 1f0:	f0 2d       	mov	r31, r0
 1f2:	ae 14       	cp	r10, r14
 1f4:	a9 f0       	breq	.+42     	; 0x220 <print_result2+0xd0>
 1f6:	0f 2e       	mov	r0, r31
 1f8:	ff e2       	ldi	r31, 0x2F	; 47
 1fa:	ff 2e       	mov	r15, r31
 1fc:	f0 2d       	mov	r31, r0
 1fe:	af 14       	cp	r10, r15
 200:	09 f0       	breq	.+2      	; 0x204 <print_result2+0xb4>
 202:	ca c0       	rjmp	.+404    	; 0x398 <print_result2+0x248>
 204:	1a c0       	rjmp	.+52     	; 0x23a <print_result2+0xea>
			case '+': LCD_write_num(temp + n3); break;
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	ab 81       	ldd	r26, Y+3	; 0x03
 20c:	bc 81       	ldd	r27, Y+4	; 0x04
 20e:	08 0f       	add	r16, r24
 210:	19 1f       	adc	r17, r25
 212:	2a 1f       	adc	r18, r26
 214:	3b 1f       	adc	r19, r27
 216:	c9 01       	movw	r24, r18
 218:	b8 01       	movw	r22, r16
 21a:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 21e:	bc c0       	rjmp	.+376    	; 0x398 <print_result2+0x248>
			case '-': LCD_write_num(temp - n3); break;
 220:	c9 01       	movw	r24, r18
 222:	b8 01       	movw	r22, r16
 224:	c9 80       	ldd	r12, Y+1	; 0x01
 226:	da 80       	ldd	r13, Y+2	; 0x02
 228:	eb 80       	ldd	r14, Y+3	; 0x03
 22a:	fc 80       	ldd	r15, Y+4	; 0x04
 22c:	6c 19       	sub	r22, r12
 22e:	7d 09       	sbc	r23, r13
 230:	8e 09       	sbc	r24, r14
 232:	9f 09       	sbc	r25, r15
 234:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 238:	af c0       	rjmp	.+350    	; 0x398 <print_result2+0x248>
			case '/': LCD_write_num(temp / n3); break;
 23a:	c9 01       	movw	r24, r18
 23c:	b8 01       	movw	r22, r16
 23e:	29 81       	ldd	r18, Y+1	; 0x01
 240:	3a 81       	ldd	r19, Y+2	; 0x02
 242:	4b 81       	ldd	r20, Y+3	; 0x03
 244:	5c 81       	ldd	r21, Y+4	; 0x04
 246:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 24a:	ca 01       	movw	r24, r20
 24c:	b9 01       	movw	r22, r18
 24e:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 252:	a2 c0       	rjmp	.+324    	; 0x398 <print_result2+0x248>
			case '*': LCD_write_num(temp * n3); break;
 254:	c9 01       	movw	r24, r18
 256:	b8 01       	movw	r22, r16
 258:	29 81       	ldd	r18, Y+1	; 0x01
 25a:	3a 81       	ldd	r19, Y+2	; 0x02
 25c:	4b 81       	ldd	r20, Y+3	; 0x03
 25e:	5c 81       	ldd	r21, Y+4	; 0x04
 260:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 264:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 268:	97 c0       	rjmp	.+302    	; 0x398 <print_result2+0x248>
		}
		return;
	}
	else if(op2 == '*' || op2 == '/'){
 26a:	0f 2e       	mov	r0, r31
 26c:	fa e2       	ldi	r31, 0x2A	; 42
 26e:	df 2e       	mov	r13, r31
 270:	f0 2d       	mov	r31, r0
 272:	ad 14       	cp	r10, r13
 274:	91 f0       	breq	.+36     	; 0x29a <print_result2+0x14a>
 276:	0f 2e       	mov	r0, r31
 278:	ff e2       	ldi	r31, 0x2F	; 47
 27a:	ef 2e       	mov	r14, r31
 27c:	f0 2d       	mov	r31, r0
 27e:	ae 14       	cp	r10, r14
 280:	09 f0       	breq	.+2      	; 0x284 <print_result2+0x134>
 282:	53 c0       	rjmp	.+166    	; 0x32a <print_result2+0x1da>
		switch(op2){
			case '/': temp = n2/n3; break;
 284:	c3 01       	movw	r24, r6
 286:	b2 01       	movw	r22, r4
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	3a 81       	ldd	r19, Y+2	; 0x02
 28c:	4b 81       	ldd	r20, Y+3	; 0x03
 28e:	5c 81       	ldd	r21, Y+4	; 0x04
 290:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 294:	29 01       	movw	r4, r18
 296:	3a 01       	movw	r6, r20
 298:	0a c0       	rjmp	.+20     	; 0x2ae <print_result2+0x15e>
			case '*': temp = n2*n3; break;
 29a:	69 81       	ldd	r22, Y+1	; 0x01
 29c:	7a 81       	ldd	r23, Y+2	; 0x02
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	9c 81       	ldd	r25, Y+4	; 0x04
 2a2:	a3 01       	movw	r20, r6
 2a4:	92 01       	movw	r18, r4
 2a6:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 2aa:	2b 01       	movw	r4, r22
 2ac:	3c 01       	movw	r6, r24
		}
		switch(op1){
 2ae:	0b 32       	cpi	r16, 0x2B	; 43
 2b0:	61 f0       	breq	.+24     	; 0x2ca <print_result2+0x17a>
 2b2:	0c 32       	cpi	r16, 0x2C	; 44
 2b4:	24 f4       	brge	.+8      	; 0x2be <print_result2+0x16e>
 2b6:	0a 32       	cpi	r16, 0x2A	; 42
 2b8:	09 f0       	breq	.+2      	; 0x2bc <print_result2+0x16c>
 2ba:	6e c0       	rjmp	.+220    	; 0x398 <print_result2+0x248>
 2bc:	2b c0       	rjmp	.+86     	; 0x314 <print_result2+0x1c4>
 2be:	0d 32       	cpi	r16, 0x2D	; 45
 2c0:	89 f0       	breq	.+34     	; 0x2e4 <print_result2+0x194>
 2c2:	0f 32       	cpi	r16, 0x2F	; 47
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <print_result2+0x178>
 2c6:	68 c0       	rjmp	.+208    	; 0x398 <print_result2+0x248>
 2c8:	18 c0       	rjmp	.+48     	; 0x2fa <print_result2+0x1aa>
			case '+': LCD_write_num(n1 + temp); break;
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	9e 81       	ldd	r25, Y+6	; 0x06
 2ce:	af 81       	ldd	r26, Y+7	; 0x07
 2d0:	b8 85       	ldd	r27, Y+8	; 0x08
 2d2:	48 0e       	add	r4, r24
 2d4:	59 1e       	adc	r5, r25
 2d6:	6a 1e       	adc	r6, r26
 2d8:	7b 1e       	adc	r7, r27
 2da:	c3 01       	movw	r24, r6
 2dc:	b2 01       	movw	r22, r4
 2de:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 2e2:	5a c0       	rjmp	.+180    	; 0x398 <print_result2+0x248>
			case '-': LCD_write_num(n1 - temp); break;
 2e4:	6d 81       	ldd	r22, Y+5	; 0x05
 2e6:	7e 81       	ldd	r23, Y+6	; 0x06
 2e8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ea:	98 85       	ldd	r25, Y+8	; 0x08
 2ec:	64 19       	sub	r22, r4
 2ee:	75 09       	sbc	r23, r5
 2f0:	86 09       	sbc	r24, r6
 2f2:	97 09       	sbc	r25, r7
 2f4:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 2f8:	4f c0       	rjmp	.+158    	; 0x398 <print_result2+0x248>
			case '/': LCD_write_num(n1 / temp); break;
 2fa:	6d 81       	ldd	r22, Y+5	; 0x05
 2fc:	7e 81       	ldd	r23, Y+6	; 0x06
 2fe:	8f 81       	ldd	r24, Y+7	; 0x07
 300:	98 85       	ldd	r25, Y+8	; 0x08
 302:	a3 01       	movw	r20, r6
 304:	92 01       	movw	r18, r4
 306:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 30a:	ca 01       	movw	r24, r20
 30c:	b9 01       	movw	r22, r18
 30e:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 312:	42 c0       	rjmp	.+132    	; 0x398 <print_result2+0x248>
			case '*': LCD_write_num(n1 * temp); break;
 314:	c3 01       	movw	r24, r6
 316:	b2 01       	movw	r22, r4
 318:	2d 81       	ldd	r18, Y+5	; 0x05
 31a:	3e 81       	ldd	r19, Y+6	; 0x06
 31c:	4f 81       	ldd	r20, Y+7	; 0x07
 31e:	58 85       	ldd	r21, Y+8	; 0x08
 320:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 324:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 328:	37 c0       	rjmp	.+110    	; 0x398 <print_result2+0x248>
		}
		return;		
	}
	
	else if(op1 == '+')	temp = n1 + n2;
 32a:	0b 32       	cpi	r16, 0x2B	; 43
 32c:	49 f4       	brne	.+18     	; 0x340 <print_result2+0x1f0>
 32e:	cd 80       	ldd	r12, Y+5	; 0x05
 330:	de 80       	ldd	r13, Y+6	; 0x06
 332:	ef 80       	ldd	r14, Y+7	; 0x07
 334:	f8 84       	ldd	r15, Y+8	; 0x08
 336:	4c 0c       	add	r4, r12
 338:	5d 1c       	adc	r5, r13
 33a:	6e 1c       	adc	r6, r14
 33c:	7f 1c       	adc	r7, r15
 33e:	10 c0       	rjmp	.+32     	; 0x360 <print_result2+0x210>
	else if(op1 == '-')	temp = n1 - n2;
 340:	0d 32       	cpi	r16, 0x2D	; 45
 342:	59 f4       	brne	.+22     	; 0x35a <print_result2+0x20a>
 344:	8d 81       	ldd	r24, Y+5	; 0x05
 346:	9e 81       	ldd	r25, Y+6	; 0x06
 348:	af 81       	ldd	r26, Y+7	; 0x07
 34a:	b8 85       	ldd	r27, Y+8	; 0x08
 34c:	84 19       	sub	r24, r4
 34e:	95 09       	sbc	r25, r5
 350:	a6 09       	sbc	r26, r6
 352:	b7 09       	sbc	r27, r7
 354:	2c 01       	movw	r4, r24
 356:	3d 01       	movw	r6, r26
 358:	03 c0       	rjmp	.+6      	; 0x360 <print_result2+0x210>
	}
}

void print_result2(uint32_t n1 ,uint32_t n2 ,uint32_t n3 ,int8_t op1 ,int8_t op2){
	LCD_write_command(0xc0);
	uint32_t temp = 0;
 35a:	44 24       	eor	r4, r4
 35c:	55 24       	eor	r5, r5
 35e:	32 01       	movw	r6, r4
	}
	
	else if(op1 == '+')	temp = n1 + n2;
	else if(op1 == '-')	temp = n1 - n2;
	
	if (op2 == '+') LCD_write_num(temp + n3);
 360:	9b e2       	ldi	r25, 0x2B	; 43
 362:	a9 16       	cp	r10, r25
 364:	69 f4       	brne	.+26     	; 0x380 <print_result2+0x230>
 366:	c9 80       	ldd	r12, Y+1	; 0x01
 368:	da 80       	ldd	r13, Y+2	; 0x02
 36a:	eb 80       	ldd	r14, Y+3	; 0x03
 36c:	fc 80       	ldd	r15, Y+4	; 0x04
 36e:	4c 0c       	add	r4, r12
 370:	5d 1c       	adc	r5, r13
 372:	6e 1c       	adc	r6, r14
 374:	7f 1c       	adc	r7, r15
 376:	c3 01       	movw	r24, r6
 378:	b2 01       	movw	r22, r4
 37a:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
 37e:	0c c0       	rjmp	.+24     	; 0x398 <print_result2+0x248>
	else LCD_write_num(temp - n3);	
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	ab 81       	ldd	r26, Y+3	; 0x03
 386:	bc 81       	ldd	r27, Y+4	; 0x04
 388:	48 1a       	sub	r4, r24
 38a:	59 0a       	sbc	r5, r25
 38c:	6a 0a       	sbc	r6, r26
 38e:	7b 0a       	sbc	r7, r27
 390:	c3 01       	movw	r24, r6
 392:	b2 01       	movw	r22, r4
 394:	0e 94 44 04 	call	0x888	; 0x888 <LCD_write_num>
			
}
 398:	28 96       	adiw	r28, 0x08	; 8
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	af 90       	pop	r10
 3b6:	7f 90       	pop	r7
 3b8:	6f 90       	pop	r6
 3ba:	5f 90       	pop	r5
 3bc:	4f 90       	pop	r4
 3be:	08 95       	ret

000003c0 <get_number_and_next_operand>:
int8_t get_number_and_next_operand(uint32_t *num){
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	5c 01       	movw	r10, r24
	uint8_t txt[4];
	uint16_t i = 1;
	*num = 0;
 3d6:	fc 01       	movw	r30, r24
 3d8:	10 82       	st	Z, r1
 3da:	11 82       	std	Z+1, r1	; 0x01
 3dc:	12 82       	std	Z+2, r1	; 0x02
 3de:	13 82       	std	Z+3, r1	; 0x03
	else LCD_write_num(temp - n3);	
			
}
int8_t get_number_and_next_operand(uint32_t *num){
	uint8_t txt[4];
	uint16_t i = 1;
 3e0:	01 e0       	ldi	r16, 0x01	; 1
 3e2:	10 e0       	ldi	r17, 0x00	; 0
	*num = 0;
	do{
		int8_t key = -1;
		while(key == -1) key = keypad_read();
 3e4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <keypad_read>
 3e8:	d8 2f       	mov	r29, r24
 3ea:	8f 3f       	cpi	r24, 0xFF	; 255
 3ec:	d9 f3       	breq	.-10     	; 0x3e4 <get_number_and_next_operand+0x24>
 3ee:	c8 2f       	mov	r28, r24
		while(keypad_read() == key) ; // to prevent multiple print of same push button
 3f0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <keypad_read>
 3f4:	8c 17       	cp	r24, r28
 3f6:	e1 f3       	breq	.-8      	; 0x3f0 <get_number_and_next_operand+0x30>
		
		if (key >= '0' && key <= '9'){
 3f8:	8c 2f       	mov	r24, r28
 3fa:	9c 2f       	mov	r25, r28
 3fc:	90 53       	subi	r25, 0x30	; 48
 3fe:	9a 30       	cpi	r25, 0x0A	; 10
 400:	60 f5       	brcc	.+88     	; 0x45a <get_number_and_next_operand+0x9a>
			*num = (key-48) + *num * i;
 402:	8c 2f       	mov	r24, r28
 404:	99 27       	eor	r25, r25
 406:	87 fd       	sbrc	r24, 7
 408:	90 95       	com	r25
 40a:	c0 97       	sbiw	r24, 0x30	; 48
 40c:	6c 01       	movw	r12, r24
 40e:	ee 24       	eor	r14, r14
 410:	d7 fc       	sbrc	r13, 7
 412:	e0 94       	com	r14
 414:	fe 2c       	mov	r15, r14
 416:	b8 01       	movw	r22, r16
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	f5 01       	movw	r30, r10
 41e:	20 81       	ld	r18, Z
 420:	31 81       	ldd	r19, Z+1	; 0x01
 422:	42 81       	ldd	r20, Z+2	; 0x02
 424:	53 81       	ldd	r21, Z+3	; 0x03
 426:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 42a:	c6 0e       	add	r12, r22
 42c:	d7 1e       	adc	r13, r23
 42e:	e8 1e       	adc	r14, r24
 430:	f9 1e       	adc	r15, r25
 432:	f5 01       	movw	r30, r10
 434:	c0 82       	st	Z, r12
 436:	d1 82       	std	Z+1, r13	; 0x01
 438:	e2 82       	std	Z+2, r14	; 0x02
 43a:	f3 82       	std	Z+3, r15	; 0x03
			LCD_write_char(key);
 43c:	8c 2f       	mov	r24, r28
 43e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
			i = 10 * i;
 442:	c8 01       	movw	r24, r16
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	00 0f       	add	r16, r16
 44a:	11 1f       	adc	r17, r17
 44c:	00 0f       	add	r16, r16
 44e:	11 1f       	adc	r17, r17
 450:	00 0f       	add	r16, r16
 452:	11 1f       	adc	r17, r17
 454:	08 0f       	add	r16, r24
 456:	19 1f       	adc	r17, r25
 458:	45 c0       	rjmp	.+138    	; 0x4e4 <get_number_and_next_operand+0x124>
		}
		else if (key == '+' || key == '-' || key == '*' || key == '/' ){ // valid in state 0 and 1
 45a:	cb 32       	cpi	r28, 0x2B	; 43
 45c:	31 f0       	breq	.+12     	; 0x46a <get_number_and_next_operand+0xaa>
 45e:	cd 32       	cpi	r28, 0x2D	; 45
 460:	21 f0       	breq	.+8      	; 0x46a <get_number_and_next_operand+0xaa>
 462:	ca 32       	cpi	r28, 0x2A	; 42
 464:	11 f0       	breq	.+4      	; 0x46a <get_number_and_next_operand+0xaa>
 466:	cf 32       	cpi	r28, 0x2F	; 47
 468:	c1 f4       	brne	.+48     	; 0x49a <get_number_and_next_operand+0xda>
			LCD_write_char(key);
 46a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
			if (state == 2 || i == 1)
 46e:	80 91 7c 00 	lds	r24, 0x007C
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	19 f0       	breq	.+6      	; 0x47c <get_number_and_next_operand+0xbc>
 476:	01 30       	cpi	r16, 0x01	; 1
 478:	11 05       	cpc	r17, r1
 47a:	59 f4       	brne	.+22     	; 0x492 <get_number_and_next_operand+0xd2>
			{
				state = 0;
 47c:	10 92 7c 00 	sts	0x007C, r1
				LCD_write_command(0xc);
 480:	8c e0       	ldi	r24, 0x0C	; 12
 482:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
				LCD_write_string("wrong entry");
 486:	80 e6       	ldi	r24, 0x60	; 96
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_write_string>
				return 0;
 48e:	d0 e0       	ldi	r29, 0x00	; 0
 490:	2f c0       	rjmp	.+94     	; 0x4f0 <get_number_and_next_operand+0x130>
			}
			state++; // GO TO next state and return operation
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 7c 00 	sts	0x007C, r24
			return key;
 498:	2b c0       	rjmp	.+86     	; 0x4f0 <get_number_and_next_operand+0x130>
		}
		else if( key == '=' ){ // valid in state 1 and 2
 49a:	cd 33       	cpi	r28, 0x3D	; 61
 49c:	d1 f4       	brne	.+52     	; 0x4d2 <get_number_and_next_operand+0x112>
			LCD_write_char(key);
 49e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
			if ((state == 1 || state == 2) && i != 1 )
 4a2:	80 91 7c 00 	lds	r24, 0x007C
 4a6:	81 50       	subi	r24, 0x01	; 1
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	40 f4       	brcc	.+16     	; 0x4bc <get_number_and_next_operand+0xfc>
 4ac:	01 30       	cpi	r16, 0x01	; 1
 4ae:	11 05       	cpc	r17, r1
 4b0:	29 f0       	breq	.+10     	; 0x4bc <get_number_and_next_operand+0xfc>
			{
				state = 3;
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	80 93 7c 00 	sts	0x007C, r24
				return key;
 4b8:	dc 2f       	mov	r29, r28
 4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <get_number_and_next_operand+0x130>
			}
			else{
				state = 0;
 4bc:	10 92 7c 00 	sts	0x007C, r1
				LCD_write_command(0xc);
 4c0:	8c e0       	ldi	r24, 0x0C	; 12
 4c2:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
				LCD_write_string("wrong entry");
 4c6:	80 e6       	ldi	r24, 0x60	; 96
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_write_string>
				return 0;				
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	0f c0       	rjmp	.+30     	; 0x4f0 <get_number_and_next_operand+0x130>
			}				
		}
		else if (key == 'C'){  // if press clear, clear LCD and start from state 0
 4d2:	c3 34       	cpi	r28, 0x43	; 67
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <get_number_and_next_operand+0x124>
			LCD_write_command(1); // clear
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
			state = 0;
 4dc:	10 92 7c 00 	sts	0x007C, r1
			return key;
 4e0:	dc 2f       	mov	r29, r28
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <get_number_and_next_operand+0x130>
		}
	}while(i <= 1000);
 4e4:	f3 e0       	ldi	r31, 0x03	; 3
 4e6:	09 3e       	cpi	r16, 0xE9	; 233
 4e8:	1f 07       	cpc	r17, r31
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <get_number_and_next_operand+0x12e>
 4ec:	7b cf       	rjmp	.-266    	; 0x3e4 <get_number_and_next_operand+0x24>
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <get_number_and_next_operand+0x132>
 4f0:	8d 2f       	mov	r24, r29
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	af 90       	pop	r10
 506:	08 95       	ret

00000508 <main>:
1 -------- second number and result
2 -------- second number and second operand
3 -------- third number and result 
*/
int main(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	2c 97       	sbiw	r28, 0x0c	; 12
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 51c:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_init>
	keypad_init();
 520:	0e 94 dd 02 	call	0x5ba	; 0x5ba <keypad_init>
	uint32_t num1,num2,num3;
	
	while(1)
    {
		state = 0; // this is the clear state and to go to state 1 you should insert 1st num and 1st operator
 524:	10 92 7c 00 	sts	0x007C, r1
		/*
				if operator1 = 'c' this mean the user press on clear button to clear everything on the LCD and state will be 0
				if operator1 = 0   this mean wrong entry and you should press clear button to start again for state 0
				if operator1 = + - * / this mean the state will change from 0 to 1
		*/
		int8_t operator1 = get_number_and_next_operand(&num1); 
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_number_and_next_operand>
 530:	c8 2e       	mov	r12, r24
		if(operator1 == 0 ) { // wrong entry and you should press on clear
 532:	88 23       	and	r24, r24
 534:	19 f4       	brne	.+6      	; 0x53c <main+0x34>
			wait_press_key();
 536:	0e 94 49 00 	call	0x92	; 0x92 <wait_press_key>
			continue;
 53a:	f4 cf       	rjmp	.-24     	; 0x524 <main+0x1c>
		}
		else if(operator1 == 'C') continue; // clear LCD and state from state 0
 53c:	83 e4       	ldi	r24, 0x43	; 67
 53e:	c8 16       	cp	r12, r24
 540:	89 f3       	breq	.-30     	; 0x524 <main+0x1c>
				if operator2 = 0   this mean wrong entry and you should press clear button to start again for state 0
				if operator2 = + - * / this mean the state will change from 1 to 2
				if operator2 = '=' this mean the state will change from 1 to 3 and result will be appear and to enter new operation you should
								   press clear again to go to state 0
		*/
		int8_t operator2 = get_number_and_next_operand(&num2);
 542:	ce 01       	movw	r24, r28
 544:	05 96       	adiw	r24, 0x05	; 5
 546:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_number_and_next_operand>
 54a:	a8 2e       	mov	r10, r24
		if(operator2 == 0 ) { // wrong entry and you should press on clear
 54c:	88 23       	and	r24, r24
 54e:	19 f4       	brne	.+6      	; 0x556 <main+0x4e>
			wait_press_key();
 550:	0e 94 49 00 	call	0x92	; 0x92 <wait_press_key>
			continue;
 554:	e7 cf       	rjmp	.-50     	; 0x524 <main+0x1c>
		}
		else if(operator1 == 'C') continue; // clear LCD and state from state 0
		
		if (state == 3)
 556:	80 91 7c 00 	lds	r24, 0x007C
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	71 f4       	brne	.+28     	; 0x57a <main+0x72>
		{
			print_result1(num1,num2,operator1);
 55e:	69 81       	ldd	r22, Y+1	; 0x01
 560:	7a 81       	ldd	r23, Y+2	; 0x02
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	9c 81       	ldd	r25, Y+4	; 0x04
 566:	2d 81       	ldd	r18, Y+5	; 0x05
 568:	3e 81       	ldd	r19, Y+6	; 0x06
 56a:	4f 81       	ldd	r20, Y+7	; 0x07
 56c:	58 85       	ldd	r21, Y+8	; 0x08
 56e:	0c 2d       	mov	r16, r12
 570:	0e 94 5d 00 	call	0xba	; 0xba <print_result1>
			wait_press_key();
 574:	0e 94 49 00 	call	0x92	; 0x92 <wait_press_key>
			continue;
 578:	d5 cf       	rjmp	.-86     	; 0x524 <main+0x1c>
				if operator3 = 0   this mean wrong entry and you should press clear button to start again for state 0
				if operator3 = '=' this mean the state will change from 2 to 3 and result will be appear and to enter new operation you should
								   press clear again to go to state 0
		*/

		int8_t operator3 = get_number_and_next_operand(&num3);
 57a:	ce 01       	movw	r24, r28
 57c:	09 96       	adiw	r24, 0x09	; 9
 57e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <get_number_and_next_operand>
		if(operator3 == 0 ) { // wrong entry and you should press on clear
 582:	88 23       	and	r24, r24
 584:	19 f4       	brne	.+6      	; 0x58c <main+0x84>
			wait_press_key();
 586:	0e 94 49 00 	call	0x92	; 0x92 <wait_press_key>
			continue;
 58a:	cc cf       	rjmp	.-104    	; 0x524 <main+0x1c>
		}
		else if(operator3 == 'C') continue; // clear LCD and state from state 0
 58c:	83 34       	cpi	r24, 0x43	; 67
 58e:	51 f2       	breq	.-108    	; 0x524 <main+0x1c>
		
		if (state == 3) 
 590:	80 91 7c 00 	lds	r24, 0x007C
 594:	83 30       	cpi	r24, 0x03	; 3
 596:	31 f6       	brne	.-116    	; 0x524 <main+0x1c>
		{
			print_result2(num1,num2,num3,operator1,operator2); // 3 number and 2 operators
 598:	69 81       	ldd	r22, Y+1	; 0x01
 59a:	7a 81       	ldd	r23, Y+2	; 0x02
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	9c 81       	ldd	r25, Y+4	; 0x04
 5a0:	2d 81       	ldd	r18, Y+5	; 0x05
 5a2:	3e 81       	ldd	r19, Y+6	; 0x06
 5a4:	4f 81       	ldd	r20, Y+7	; 0x07
 5a6:	58 85       	ldd	r21, Y+8	; 0x08
 5a8:	e9 84       	ldd	r14, Y+9	; 0x09
 5aa:	fa 84       	ldd	r15, Y+10	; 0x0a
 5ac:	0b 85       	ldd	r16, Y+11	; 0x0b
 5ae:	1c 85       	ldd	r17, Y+12	; 0x0c
 5b0:	0e 94 a8 00 	call	0x150	; 0x150 <print_result2>
			wait_press_key();
 5b4:	0e 94 49 00 	call	0x92	; 0x92 <wait_press_key>
			continue;
 5b8:	b5 cf       	rjmp	.-150    	; 0x524 <main+0x1c>

000005ba <keypad_init>:
	'-','3','2','1',
	'+','=','0','C'
};

void keypad_init(){
	CLRBIT(DDRD,2);
 5ba:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
 5bc:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
 5be:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);
 5c0:	8d 98       	cbi	0x11, 5	; 17
	PORTD |= 0b00111100; // internal pull up in case of protues
 5c2:	82 b3       	in	r24, 0x12	; 18
 5c4:	8c 63       	ori	r24, 0x3C	; 60
 5c6:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRB,4);
 5c8:	bc 9a       	sbi	0x17, 4	; 23
	SETBIT(DDRB,5);
 5ca:	bd 9a       	sbi	0x17, 5	; 23
	SETBIT(DDRB,6);
 5cc:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(DDRB,7);
 5ce:	bf 9a       	sbi	0x17, 7	; 23
}
 5d0:	08 95       	ret

000005d2 <keypad_read>:
int8_t keypad_read(){
	for(uint8_t i=0;i<4;i++){
 5d2:	e0 e0       	ldi	r30, 0x00	; 0
		
	PORTB = PORTB & 0b00001111;	
 5d4:	88 b3       	in	r24, 0x18	; 24
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 5d8:	88 bb       	out	0x18, r24	; 24
	if(i==0) PORTB  |= 0b11100000;
 5da:	ee 23       	and	r30, r30
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <keypad_read+0x14>
 5de:	88 b3       	in	r24, 0x18	; 24
 5e0:	80 6e       	ori	r24, 0xE0	; 224
 5e2:	88 bb       	out	0x18, r24	; 24
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <keypad_read+0x2c>
	if(i==1) PORTB  |= 0b11010000;
 5e6:	e1 30       	cpi	r30, 0x01	; 1
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <keypad_read+0x20>
 5ea:	88 b3       	in	r24, 0x18	; 24
 5ec:	80 6d       	ori	r24, 0xD0	; 208
 5ee:	88 bb       	out	0x18, r24	; 24
 5f0:	0b c0       	rjmp	.+22     	; 0x608 <keypad_read+0x36>
	if(i==2) PORTB  |= 0b10110000;
 5f2:	e2 30       	cpi	r30, 0x02	; 2
 5f4:	21 f4       	brne	.+8      	; 0x5fe <keypad_read+0x2c>
 5f6:	88 b3       	in	r24, 0x18	; 24
 5f8:	80 6b       	ori	r24, 0xB0	; 176
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <keypad_read+0x36>
	if(i==3) PORTB  |= 0b01110000;
 5fe:	e3 30       	cpi	r30, 0x03	; 3
 600:	19 f4       	brne	.+6      	; 0x608 <keypad_read+0x36>
 602:	88 b3       	in	r24, 0x18	; 24
 604:	80 67       	ori	r24, 0x70	; 112
 606:	88 bb       	out	0x18, r24	; 24
	
	if(GETBIT(PIND,2)==0) return keypad_matrix[0+4*i];
 608:	80 b3       	in	r24, 0x10	; 16
 60a:	82 fd       	sbrc	r24, 2
 60c:	09 c0       	rjmp	.+18     	; 0x620 <keypad_read+0x4e>
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	e4 59       	subi	r30, 0x94	; 148
 61a:	ff 4f       	sbci	r31, 0xFF	; 255
 61c:	80 81       	ld	r24, Z
 61e:	08 95       	ret
	if(GETBIT(PIND,3)==0) return keypad_matrix[1+4*i];
 620:	80 b3       	in	r24, 0x10	; 16
 622:	83 fd       	sbrc	r24, 3
 624:	09 c0       	rjmp	.+18     	; 0x638 <keypad_read+0x66>
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	e4 59       	subi	r30, 0x94	; 148
 632:	ff 4f       	sbci	r31, 0xFF	; 255
 634:	81 81       	ldd	r24, Z+1	; 0x01
 636:	08 95       	ret
	if(GETBIT(PIND,4)==0) return keypad_matrix[2+4*i];
 638:	80 b3       	in	r24, 0x10	; 16
 63a:	84 fd       	sbrc	r24, 4
 63c:	09 c0       	rjmp	.+18     	; 0x650 <keypad_read+0x7e>
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	e4 59       	subi	r30, 0x94	; 148
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	08 95       	ret
	if(GETBIT(PIND,5)==0) return keypad_matrix[3+4*i];
 650:	80 b3       	in	r24, 0x10	; 16
 652:	85 fd       	sbrc	r24, 5
 654:	09 c0       	rjmp	.+18     	; 0x668 <keypad_read+0x96>
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	e4 59       	subi	r30, 0x94	; 148
 662:	ff 4f       	sbci	r31, 0xFF	; 255
 664:	83 81       	ldd	r24, Z+3	; 0x03
 666:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 668:	8f e9       	ldi	r24, 0x9F	; 159
 66a:	9f e0       	ldi	r25, 0x0F	; 15
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <keypad_read+0x9a>
 670:	00 c0       	rjmp	.+0      	; 0x672 <keypad_read+0xa0>
 672:	00 00       	nop
	SETBIT(DDRB,5);
	SETBIT(DDRB,6);
	SETBIT(DDRB,7);
}
int8_t keypad_read(){
	for(uint8_t i=0;i<4;i++){
 674:	ef 5f       	subi	r30, 0xFF	; 255
 676:	e4 30       	cpi	r30, 0x04	; 4
 678:	09 f0       	breq	.+2      	; 0x67c <keypad_read+0xaa>
 67a:	ac cf       	rjmp	.-168    	; 0x5d4 <keypad_read+0x2>
	if(GETBIT(PIND,3)==0) return keypad_matrix[1+4*i];
	if(GETBIT(PIND,4)==0) return keypad_matrix[2+4*i];
	if(GETBIT(PIND,5)==0) return keypad_matrix[3+4*i];
	_delay_ms(1);
	}    
    return -1;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
	}
 67e:	08 95       	ret

00000680 <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 680:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 682:	98 2f       	mov	r25, r24
 684:	92 95       	swap	r25
 686:	9f 70       	andi	r25, 0x0F	; 15
 688:	90 ff       	sbrs	r25, 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <LCD_write_command+0x10>
 68c:	db 9a       	sbi	0x1b, 3	; 27
 68e:	01 c0       	rjmp	.+2      	; 0x692 <LCD_write_command+0x12>
 690:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 692:	98 2f       	mov	r25, r24
 694:	92 95       	swap	r25
 696:	96 95       	lsr	r25
 698:	97 70       	andi	r25, 0x07	; 7
 69a:	90 ff       	sbrs	r25, 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <LCD_write_command+0x22>
 69e:	dc 9a       	sbi	0x1b, 4	; 27
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <LCD_write_command+0x24>
 6a2:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 6a4:	98 2f       	mov	r25, r24
 6a6:	92 95       	swap	r25
 6a8:	96 95       	lsr	r25
 6aa:	96 95       	lsr	r25
 6ac:	93 70       	andi	r25, 0x03	; 3
 6ae:	90 ff       	sbrs	r25, 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <LCD_write_command+0x36>
 6b2:	dd 9a       	sbi	0x1b, 5	; 27
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <LCD_write_command+0x38>
 6b6:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 6b8:	88 23       	and	r24, r24
 6ba:	14 f4       	brge	.+4      	; 0x6c0 <LCD_write_command+0x40>
 6bc:	de 9a       	sbi	0x1b, 6	; 27
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <LCD_write_command+0x42>
 6c0:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 6c2:	da 9a       	sbi	0x1b, 2	; 27
 6c4:	ef e9       	ldi	r30, 0x9F	; 159
 6c6:	ff e0       	ldi	r31, 0x0F	; 15
 6c8:	31 97       	sbiw	r30, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCD_write_command+0x48>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <LCD_write_command+0x4e>
 6ce:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 6d0:	da 98       	cbi	0x1b, 2	; 27
 6d2:	ef e9       	ldi	r30, 0x9F	; 159
 6d4:	ff e0       	ldi	r31, 0x0F	; 15
 6d6:	31 97       	sbiw	r30, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_write_command+0x56>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_write_command+0x5c>
 6dc:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 6de:	80 ff       	sbrs	r24, 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <LCD_write_command+0x66>
 6e2:	db 9a       	sbi	0x1b, 3	; 27
 6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <LCD_write_command+0x68>
 6e6:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 6e8:	98 2f       	mov	r25, r24
 6ea:	96 95       	lsr	r25
 6ec:	90 ff       	sbrs	r25, 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <LCD_write_command+0x74>
 6f0:	dc 9a       	sbi	0x1b, 4	; 27
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <LCD_write_command+0x76>
 6f4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 6f6:	98 2f       	mov	r25, r24
 6f8:	96 95       	lsr	r25
 6fa:	96 95       	lsr	r25
 6fc:	90 ff       	sbrs	r25, 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <LCD_write_command+0x84>
 700:	dd 9a       	sbi	0x1b, 5	; 27
 702:	01 c0       	rjmp	.+2      	; 0x706 <LCD_write_command+0x86>
 704:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 706:	86 95       	lsr	r24
 708:	86 95       	lsr	r24
 70a:	86 95       	lsr	r24
 70c:	80 ff       	sbrs	r24, 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <LCD_write_command+0x94>
 710:	de 9a       	sbi	0x1b, 6	; 27
 712:	01 c0       	rjmp	.+2      	; 0x716 <LCD_write_command+0x96>
 714:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 716:	da 9a       	sbi	0x1b, 2	; 27
 718:	8f e9       	ldi	r24, 0x9F	; 159
 71a:	9f e0       	ldi	r25, 0x0F	; 15
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_write_command+0x9c>
 720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_write_command+0xa2>
 722:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 724:	da 98       	cbi	0x1b, 2	; 27
 726:	ef e9       	ldi	r30, 0x9F	; 159
 728:	ff e0       	ldi	r31, 0x0F	; 15
 72a:	31 97       	sbiw	r30, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_write_command+0xaa>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <LCD_write_command+0xb0>
 730:	00 00       	nop
	 _delay_ms(1);
}
 732:	08 95       	ret

00000734 <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 734:	8a b3       	in	r24, 0x1a	; 26
 736:	8e 67       	ori	r24, 0x7E	; 126
 738:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
 740:	8f e7       	ldi	r24, 0x7F	; 127
 742:	9e e3       	ldi	r25, 0x3E	; 62
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <LCD_init+0x10>
 748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_init+0x16>
 74a:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 74c:	83 e0       	ldi	r24, 0x03	; 3
 74e:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
 752:	af e7       	ldi	r26, 0x7F	; 127
 754:	be e3       	ldi	r27, 0x3E	; 62
 756:	11 97       	sbiw	r26, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <LCD_init+0x22>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <LCD_init+0x28>
 75c:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 75e:	83 e0       	ldi	r24, 0x03	; 3
 760:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
 764:	8f e7       	ldi	r24, 0x7F	; 127
 766:	9e e3       	ldi	r25, 0x3E	; 62
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_init+0x34>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_init+0x3a>
 76e:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
LCD_write_command(0X28);
 776:	88 e2       	ldi	r24, 0x28	; 40
 778:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
LCD_write_command(0X08);
 77c:	88 e0       	ldi	r24, 0x08	; 8
 77e:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
LCD_write_command(0X01);
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
LCD_write_command(0X06);
 788:	86 e0       	ldi	r24, 0x06	; 6
 78a:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	99 ef       	ldi	r25, 0xF9	; 249
 792:	a0 e0       	ldi	r26, 0x00	; 0
 794:	81 50       	subi	r24, 0x01	; 1
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	a0 40       	sbci	r26, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <LCD_init+0x60>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_init+0x6a>
 79e:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 7a0:	8c e0       	ldi	r24, 0x0C	; 12
 7a2:	0e 94 40 03 	call	0x680	; 0x680 <LCD_write_command>
}
 7a6:	08 95       	ret

000007a8 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 7a8:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 7aa:	98 2f       	mov	r25, r24
 7ac:	92 95       	swap	r25
 7ae:	9f 70       	andi	r25, 0x0F	; 15
 7b0:	90 ff       	sbrs	r25, 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <LCD_write_char+0x10>
 7b4:	db 9a       	sbi	0x1b, 3	; 27
 7b6:	01 c0       	rjmp	.+2      	; 0x7ba <LCD_write_char+0x12>
 7b8:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 7ba:	98 2f       	mov	r25, r24
 7bc:	92 95       	swap	r25
 7be:	96 95       	lsr	r25
 7c0:	97 70       	andi	r25, 0x07	; 7
 7c2:	90 ff       	sbrs	r25, 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <LCD_write_char+0x22>
 7c6:	dc 9a       	sbi	0x1b, 4	; 27
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <LCD_write_char+0x24>
 7ca:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 7cc:	98 2f       	mov	r25, r24
 7ce:	92 95       	swap	r25
 7d0:	96 95       	lsr	r25
 7d2:	96 95       	lsr	r25
 7d4:	93 70       	andi	r25, 0x03	; 3
 7d6:	90 ff       	sbrs	r25, 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <LCD_write_char+0x36>
 7da:	dd 9a       	sbi	0x1b, 5	; 27
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <LCD_write_char+0x38>
 7de:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 7e0:	88 23       	and	r24, r24
 7e2:	14 f4       	brge	.+4      	; 0x7e8 <LCD_write_char+0x40>
 7e4:	de 9a       	sbi	0x1b, 6	; 27
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <LCD_write_char+0x42>
 7e8:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 7ea:	da 9a       	sbi	0x1b, 2	; 27
 7ec:	ef e9       	ldi	r30, 0x9F	; 159
 7ee:	ff e0       	ldi	r31, 0x0F	; 15
 7f0:	31 97       	sbiw	r30, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <LCD_write_char+0x48>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <LCD_write_char+0x4e>
 7f6:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 7f8:	da 98       	cbi	0x1b, 2	; 27
 7fa:	ef e9       	ldi	r30, 0x9F	; 159
 7fc:	ff e0       	ldi	r31, 0x0F	; 15
 7fe:	31 97       	sbiw	r30, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <LCD_write_char+0x56>
 802:	00 c0       	rjmp	.+0      	; 0x804 <LCD_write_char+0x5c>
 804:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 806:	80 ff       	sbrs	r24, 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <LCD_write_char+0x66>
 80a:	db 9a       	sbi	0x1b, 3	; 27
 80c:	01 c0       	rjmp	.+2      	; 0x810 <LCD_write_char+0x68>
 80e:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 810:	98 2f       	mov	r25, r24
 812:	96 95       	lsr	r25
 814:	90 ff       	sbrs	r25, 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <LCD_write_char+0x74>
 818:	dc 9a       	sbi	0x1b, 4	; 27
 81a:	01 c0       	rjmp	.+2      	; 0x81e <LCD_write_char+0x76>
 81c:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 81e:	98 2f       	mov	r25, r24
 820:	96 95       	lsr	r25
 822:	96 95       	lsr	r25
 824:	90 ff       	sbrs	r25, 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <LCD_write_char+0x84>
 828:	dd 9a       	sbi	0x1b, 5	; 27
 82a:	01 c0       	rjmp	.+2      	; 0x82e <LCD_write_char+0x86>
 82c:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 82e:	86 95       	lsr	r24
 830:	86 95       	lsr	r24
 832:	86 95       	lsr	r24
 834:	80 ff       	sbrs	r24, 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <LCD_write_char+0x94>
 838:	de 9a       	sbi	0x1b, 6	; 27
 83a:	01 c0       	rjmp	.+2      	; 0x83e <LCD_write_char+0x96>
 83c:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 83e:	da 9a       	sbi	0x1b, 2	; 27
 840:	8f e9       	ldi	r24, 0x9F	; 159
 842:	9f e0       	ldi	r25, 0x0F	; 15
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <LCD_write_char+0x9c>
 848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_write_char+0xa2>
 84a:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 84c:	da 98       	cbi	0x1b, 2	; 27
 84e:	ef e9       	ldi	r30, 0x9F	; 159
 850:	ff e0       	ldi	r31, 0x0F	; 15
 852:	31 97       	sbiw	r30, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <LCD_write_char+0xaa>
 856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_write_char+0xb0>
 858:	00 00       	nop
	 _delay_ms(1);
}
 85a:	08 95       	ret

0000085c <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 864:	fc 01       	movw	r30, r24
 866:	80 81       	ld	r24, Z
 868:	88 23       	and	r24, r24
 86a:	51 f0       	breq	.+20     	; 0x880 <__stack+0x21>
 86c:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 86e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 872:	cf 5f       	subi	r28, 0xFF	; 255
 874:	f8 01       	movw	r30, r16
 876:	ec 0f       	add	r30, r28
 878:	f1 1d       	adc	r31, r1
 87a:	80 81       	ld	r24, Z
 87c:	88 23       	and	r24, r24
 87e:	b9 f7       	brne	.-18     	; 0x86e <__stack+0xf>
		LCD_write_char(txt[i]);
	}
}
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 888:	8f 92       	push	r8
 88a:	9f 92       	push	r9
 88c:	af 92       	push	r10
 88e:	bf 92       	push	r11
 890:	ef 92       	push	r14
 892:	ff 92       	push	r15
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	2a 97       	sbiw	r28, 0x0a	; 10
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	dc 01       	movw	r26, r24
 8ac:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 8ae:	ae 01       	movw	r20, r28
 8b0:	4f 5f       	subi	r20, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	2a e0       	ldi	r18, 0x0A	; 10
 8b6:	fa 01       	movw	r30, r20
 8b8:	11 92       	st	Z+, r1
 8ba:	2a 95       	dec	r18
 8bc:	e9 f7       	brne	.-6      	; 0x8b8 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 8be:	00 97       	sbiw	r24, 0x00	; 0
 8c0:	a1 05       	cpc	r26, r1
 8c2:	b1 05       	cpc	r27, r1
 8c4:	21 f4       	brne	.+8      	; 0x8ce <LCD_write_num+0x46>
	LCD_write_char('0');
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
	return;
 8cc:	38 c0       	rjmp	.+112    	; 0x93e <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 8ce:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 8d0:	0f 2e       	mov	r0, r31
 8d2:	fa e0       	ldi	r31, 0x0A	; 10
 8d4:	8f 2e       	mov	r8, r31
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	9f 2e       	mov	r9, r31
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	af 2e       	mov	r10, r31
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	bf 2e       	mov	r11, r31
 8e2:	f0 2d       	mov	r31, r0
 8e4:	e1 2e       	mov	r14, r17
 8e6:	ff 24       	eor	r15, r15
 8e8:	e7 fc       	sbrc	r14, 7
 8ea:	f0 94       	com	r15
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	2c 0f       	add	r18, r28
 8f2:	3d 1f       	adc	r19, r29
 8f4:	e2 0e       	add	r14, r18
 8f6:	f3 1e       	adc	r15, r19
 8f8:	bc 01       	movw	r22, r24
 8fa:	cd 01       	movw	r24, r26
 8fc:	a5 01       	movw	r20, r10
 8fe:	94 01       	movw	r18, r8
 900:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 904:	60 5d       	subi	r22, 0xD0	; 208
 906:	f7 01       	movw	r30, r14
 908:	60 83       	st	Z, r22
	num = num  / 10 ;
 90a:	82 2f       	mov	r24, r18
 90c:	93 2f       	mov	r25, r19
 90e:	a4 2f       	mov	r26, r20
 910:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 912:	1f 5f       	subi	r17, 0xFF	; 255
 914:	00 97       	sbiw	r24, 0x00	; 0
 916:	a1 05       	cpc	r26, r1
 918:	b1 05       	cpc	r27, r1
 91a:	21 f7       	brne	.-56     	; 0x8e4 <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 91c:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 91e:	7a f0       	brmi	.+30     	; 0x93e <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 920:	e1 2f       	mov	r30, r17
 922:	ff 27       	eor	r31, r31
 924:	e7 fd       	sbrc	r30, 7
 926:	f0 95       	com	r31
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	2c 0f       	add	r18, r28
 92e:	3d 1f       	adc	r19, r29
 930:	e2 0f       	add	r30, r18
 932:	f3 1f       	adc	r31, r19
 934:	80 81       	ld	r24, Z
 936:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_write_char>
	i--;
 93a:	11 50       	subi	r17, 0x01	; 1
 93c:	88 f7       	brcc	.-30     	; 0x920 <LCD_write_num+0x98>
}
 93e:	2a 96       	adiw	r28, 0x0a	; 10
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	bf 90       	pop	r11
 956:	af 90       	pop	r10
 958:	9f 90       	pop	r9
 95a:	8f 90       	pop	r8
 95c:	08 95       	ret

0000095e <__mulsi3>:
 95e:	62 9f       	mul	r22, r18
 960:	d0 01       	movw	r26, r0
 962:	73 9f       	mul	r23, r19
 964:	f0 01       	movw	r30, r0
 966:	82 9f       	mul	r24, r18
 968:	e0 0d       	add	r30, r0
 96a:	f1 1d       	adc	r31, r1
 96c:	64 9f       	mul	r22, r20
 96e:	e0 0d       	add	r30, r0
 970:	f1 1d       	adc	r31, r1
 972:	92 9f       	mul	r25, r18
 974:	f0 0d       	add	r31, r0
 976:	83 9f       	mul	r24, r19
 978:	f0 0d       	add	r31, r0
 97a:	74 9f       	mul	r23, r20
 97c:	f0 0d       	add	r31, r0
 97e:	65 9f       	mul	r22, r21
 980:	f0 0d       	add	r31, r0
 982:	99 27       	eor	r25, r25
 984:	72 9f       	mul	r23, r18
 986:	b0 0d       	add	r27, r0
 988:	e1 1d       	adc	r30, r1
 98a:	f9 1f       	adc	r31, r25
 98c:	63 9f       	mul	r22, r19
 98e:	b0 0d       	add	r27, r0
 990:	e1 1d       	adc	r30, r1
 992:	f9 1f       	adc	r31, r25
 994:	bd 01       	movw	r22, r26
 996:	cf 01       	movw	r24, r30
 998:	11 24       	eor	r1, r1
 99a:	08 95       	ret

0000099c <__udivmodsi4>:
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	1a 2e       	mov	r1, r26
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	fd 01       	movw	r30, r26
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__udivmodsi4_ep>

000009a8 <__udivmodsi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	ee 1f       	adc	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	a2 17       	cp	r26, r18
 9b2:	b3 07       	cpc	r27, r19
 9b4:	e4 07       	cpc	r30, r20
 9b6:	f5 07       	cpc	r31, r21
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__udivmodsi4_ep>
 9ba:	a2 1b       	sub	r26, r18
 9bc:	b3 0b       	sbc	r27, r19
 9be:	e4 0b       	sbc	r30, r20
 9c0:	f5 0b       	sbc	r31, r21

000009c2 <__udivmodsi4_ep>:
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a 94       	dec	r1
 9cc:	69 f7       	brne	.-38     	; 0x9a8 <__udivmodsi4_loop>
 9ce:	60 95       	com	r22
 9d0:	70 95       	com	r23
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	bd 01       	movw	r22, r26
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
